//while문 
//while(조건식)
//{ 실행문 ; }

/*
조건식을 먼저 비교하여
조건식의 처리 결과가 참인 경우
특정 영역을 반복 수행하는 문장
반복 횟수가 정해져 있지 않은 경우나 반복 횟수가 많은 경우 주로 사용
조건이 맞지 않는 경우 단 한번도 실행되지 않을 수 있음
*/


package Base;

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;

public class day05 {
	
	public static void main(String[] args) throws IOException
	{
		
		//문제(1)
		/*
		//1부터 100까지의 합을 계산하여
		//결과를 출력하는 프로그램을 구현
		
		//1부터 차례로 담아 1씩 증가하는 변수 선언 및 초기화
		int n=1;
		
		//누적합을 계산하여 담아낼 변수 선언 및 초기화
		int sum=0;
		
		//연산 및 처리(반복문 구성)
		while(n<=100)    //만약 n이 100보다 같거나 작다면
		{
			sum += n;    //sum을 n만큼 증가시켜라
			
			n++;        //n이 1씩 증가해 나가는 연산 추가
		}
		
		//결과 출력
		System.out.println("1부터 100까지의 합 : " + sum);
		//-->> 1부터 100까지의 합 : 5050
		*/
		
		
		
		
		//문제(2)
		/*
		//1부터 100까지의 정수 중에서
		//짝수들의 합을 계산하여 결과값을 출력하는 프로그램을 구현
		
		//주요 변수 선언 및 초기화
		int n = 2;
		int sum=0; //짝수들의 합을 담을 곳
		
		//연산 및 처리(반복 연산)
		while(n<=100)
		{
			sum += n; //sum 값을 n 만큼 증가
			n += 2;   //n 값을 2 만큼 증가
		} 
		
		//결과 출력
		System.out.println("1부터 100까지의 수 중 짝수의 합 : " + sum);
		//-->>1부터 100까지의 수 중 짝수의 합 : 2550
		*/
		
		
		
		
		//문제(3)
		/*
		//1부터 100까지의 정수 중에서
		//짝수들의 합과 홀수들의 합을 따로 구분하여 계산
		
		//주요 변수 선언
		int n=1;
		int even=0;
		int odd=0;
		
		//연산 및 처리
		while (n<=100) {
			if (n%2==0) {
				even += n;
			}
			else if (n%2!=0) {
				odd += n;
			}
			else
			{
				System.out.println("판별 불가 데이터");
				return;
			}
			
			n++;
		}
		
		//결과출력
		System.out.println("1부터 100까지의 정수 중");
		System.out.println("짝수의 합 : " + even);
		System.out.println("홀수의 합 : " + odd);
		
		//결과
		//1부터 100까지의 정수 중
		//짝수의 합 : 2550
		//홀수의 합 : 2500
		*/
		
		
		
		
		//문제(4)
		/*
		//해당 값까지의 누접곱을 구하는 프로그램 구현
		
		//주요 변수 선언 및 초기화
		int n = 0;
		int result = 1; //누적 곱을 담을 변수를 1로 초기화한다
		
		//연산 및 처리
		//해당값을 5로 설정했을 경우...
		while (n<5) {
			n++;
			result *= n;
		}
		
		//결과 출력
		System.out.print("연산 결과 : " + result);
		//-->>연산 결과 : 120
		*/
		
		
		
		
		//문제(5)
		// n / (n+1) 의 연산 처리를 출력하는 프로그램 구현
		
		//주요 변수 선언 및 초기화
		int n = 0;       //1부터 1씩 증가하게 될 변수
		double sum = 0;  //누적합을 담아낼 변수 (실수 형태로 처리)
		
		//연산 및 처리
		// 0 1 2 3 4 5 6 7 8 
		while (n<9) {
			//증감식 구성
			//이는 최종적으로 반복문의 조건을 무너뜨리는 열쇠가 되는 구문임
			n++;
			
			sum += (double)n/(n+1);
			//정수 기반 나눗셈 연산은 몫을 반환하기 때문에
			//실수 기반 연산을 수행하도록 처리하기 위해서
			//나눗셈 연산자를 중심으로 피연산자 중 하나를
			//실수 형태로 만들어주는 것이 중요하다.
			//즉, n값을 먼저 독자적으로 실수로 바꿔주는 것이다.
			
		}
		
		//결과 출력
		System.out.printf("연산 결과 : %f%n " , sum);
		//-->>연산 결과 : 7.071032
		
		
		
		
		
	}

}









