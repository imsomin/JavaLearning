//정보 은닉과 접근 제어 지시자(=접근지정자, 접근제한자)

//사용자로부터 년, 월, 일을 입력받아
//해당 날짜의 요일을 출력하는 프로그램을 구현한다.
//클래스의 개념을 활용하여 작성할 수 있도록 한다. (-> WeekDay 클래스 설계)
//배열의 개념도 적용시켜 작성할 수 있도록 한다.
//접근제어지시자의 개념도 확인하여 작성할 수 있도록 한다.
//최종적으로 WeekDay 클래스 설계를 통해
//day15_1 클래스의 main() 메소드가 정상적으로 프로그램 실행될 수 있도록 한다.

// ※ 1년 1월 1일 -> "월요일"로 설정


package Medium;

import java.util.Scanner;

class WeekDay
{
	
	//주요 변수 선언
	private int y, m, d;    //-- 사용자가 입력한 연, 월, 일을 담아낼 변수

	//메소드 정의 -> 기능 : 연, 월, 일 입력받기
	public void input()  //값 반환 필요 없으므로 void

	{
		Scanner sc = new Scanner(System.in);

		System.out.print("년 월 일 입력(공백구분) : ");
		y = sc.nextInt();
		m = sc.nextInt();
		d = sc.nextInt();

	}

	//메소드 정의 -> 기능 : 요일 산출하기 "일요일" ("일" <- char)
	//public void week()
	public String week()
	{
		//각 월의 마지막 날짜(각 월의 최대값)을 배열 형태로 구성
		int[] months = {31, 0, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31};

		//테스트(1)
		//System.out.println(months.length);
		//-->> 12

		//요일 이름에 대한 배열 구성
		String[] weekNames = {"일", "월", "화", "수", "목", "금", "토"};

		//날 수를 종합할 변수
		int nalsu;

		//윤년에 따른 2월의 날 수 계산
		//입력 년도가 윤년이라면... 2월의 마지막 날짜를 29일로 설정
		//입력 년도가 평년이라면... 2월의 마지막 날짜를 28일로 설정

		if (y%4==0 && y%100!=0 || y%400==0)  //입력 년도가 윤년이라면...
 		{
			//2월의 마지막 날짜를 29일로 설정
			months[1] = 29;

		} 
		else                                 //입견 년도가 평년이라면...
		{
			//2월의 마지막 날짜를 28일로 설정
			months[1] = 28;
		}

		// ① 1년 1월 1일부터 입력받은 년도(y)의 이전 년도(y-1) 12월 31일까지의 날 수 계산

		nalsu = (y-1)*365 + (y-1)/4 - (y-1)/100 + (y-1)/400;
		//(y-1)*365 : 1년 기본주기
		//(y-1)/4   : 4년마다+1
		//(y-1)/100 : 100년마다+1(X)  //100년은 4년 계산할때 더해지므로 더하기 안하려고 빼는 것이다!
		//(y-1)/400 : 400년마다+1

		//테스트(2)
		//System.out.println("날 수 : " + nalsu);
		//날수 : 738155
		//1.1.1 ~ 2021.12.31의 총 날 수 


		// ② 입력받은 월의 이전 월 까지의 날 수 계산 후
		//   이 계산 결과를 1변 결과에 더하는 연산
		for (int i=0; i<(m-1); i++)
		{
			nalsu += months[i];
		}
		// 0 1 2 3 4 ... (0부터 시작)
		//m이 아니라 m-1인 이유

		//테스트(3)
		//System.out.println("날 수 : " + nalsu);
		// 입력 날짜 : 2022 10 10
		// 날 수 : 738428

		// ③ 입력받은 일의 날짜만큼 날 수 계산 후
		//    2번 결과에 더하는 연산
		nalsu += d;

		//테스트(4)
		//System.out.println("날 수 : " + nalsu);
		// 입력 날짜 : 2022 10 10
		// 날 수 : 738438

		//-------------------------------날 수 연산 끝-------------------------------

		//무슨 요일인지 확인하기 위한 연산
		int w = nalsu % 7;    //--전체날수 % 7 == 0 -> 일요일
		                      //  전체날수 % 7 == 1 -> 월요일
							  //  전체날수 % 7 == 2 -> 화요일

		//테스트(5)
		//System.out.println("w : " + w);
		//-->> 년 월 일 입력(공백 구분) : 2022 6 20
		//     w : 1
		
		
		return weekNames[w];
	}


		//일    월     화    수   목    금   토
		//    1  2  3  4  5  6
		// 7  8  9 10
		//날수 % 7 ->1(나머지) -> 월


	//메소드 정의 -> 기능 : 결과 출력하기
	public void print(String day)
	{
		System.out.printf(">> %d년 %d월 %d일 -> %s요일\n", y, m, d, day);
	}

}


public class day15_1 {
	
	public static void main(String[] args) 
	{
		//WeekDay 클래스 기반 인스턴스 생성
		WeekDay wd = new WeekDay();

		//입력 메소드 호출
		wd.input();

		//요일 산출 메소드 호출 및 결과 확인
		String result = wd.week();

		//최종 결과 출력 메소드 호출
		wd.print(result);




	}

}

//결과
/*
년 월 일 입력(공백구분) : 2022 9 14
>> 2022년 9월 14일 -> 수요일
*/
